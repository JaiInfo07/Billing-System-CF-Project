name: CI/CD Pipeline

on: 
  push:
    branches:
      -  master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -  name: checkout-code
         uses: actions/checkout@v3
  
      - name: Prepare Build Directory
        run: |
          mkdir build
          rsync -av ./ ./build --exclude build
          zip -r build.zip build
          
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -  name: checkout-code
         uses: actions/checkout@v3
      
      - name: Install CommandBox
        run: |
            curl -fsSl https://downloads.ortussolutions.com/debs/gpg | sudo apt-key add -
            echo "deb http://downloads.ortussolutions.com/debs/noarch /" | sudo tee -a /etc/apt/sources.list.d/commandbox.list
            sudo apt-get update && sudo apt-get install commandbox

      - name: Start ColdFusion Server for Testing
        run: |
          box server start cfengine=lucee@5 --no-config

      - name: Run Tests
        run: |
          box testbox run directory=tests.specs recurse=true reporter=json verbose=true

  sonarcloud-analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up JDK 17  # SonarCloud-ku Java runtime thevai
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install SonarScanner
        run: npm install sonar-scanner

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./node_modules/.bin/sonar-scanner \
            -Dsonar.projectKey=Cold_Fusion_Project \
            -Dsonar.organization=ilayarajac515 \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
            
      # - name: Checkout Code
      #   uses: actions/checkout@v3

      # - name: Verify Checkout
      #   run: ls -la
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb

      - name: Run Trivy Scan
        run: trivy fs /home/runner/work/Cold_Fusion_Project/Cold_Fusion_Project


  docker-image:
    runs-on: ubuntu-latest
    needs: [build, test, security-scan, sonarcloud-analysis]
    steps:
      -  name: build docker image
         run:  |
            ls -l
            docker build -t cold_fusion_app:latest /home/runner/work/Cold_Fusion_Project/Cold_Fusion_Project

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker tag cold_fusion_app:latest ${{ secrets.DOCKER_USERNAME }}/cold_fusion_app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cold_fusion_app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test, sonarcloud-analysis, security-scan, docker-image]
    steps: 
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get svc
